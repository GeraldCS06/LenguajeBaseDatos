/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import Bo.MascotaBo;
import Entidad.Mascota;
import conexion.Conexion;
import javax.swing.table.DefaultTableModel;
import java.sql.ResultSet;
import java.sql.Connection;
import java.sql.CallableStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;


/**
 *
 * @author vrb00
 */
public class Frm_Mascota extends javax.swing.JFrame {

    private int id_mascota;
    private DefaultTableModel tabla;
    private Mascota mac = new Mascota();
    private MascotaBo macBo = new MascotaBo();
    private String mensaje = "";

    /**
     * Creates new form Frm_Persona
     */
    public Frm_Mascota() {
        initComponents();
        this.setVisible(true);
        this.setLocationRelativeTo(null);
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txt_nombre_mascota = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txt_raza = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txt_edad = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        btn_agregar = new javax.swing.JButton();
        btn_editar = new javax.swing.JButton();
        btn_buscar = new javax.swing.JButton();
        btn_eliminar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla_mascotas = new javax.swing.JTable();
        combo_persona = new javax.swing.JComboBox<>();
        combo_especie = new javax.swing.JComboBox<>();
        txt_peso = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        combo_genero = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        combo_esterilizado = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        menu_dueno = new javax.swing.JMenu();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        menu_especie = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(49, 66, 82));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Mascotas");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(277, 277, 277)
                .addComponent(jLabel2)
                .addContainerGap(307, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel2)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        jLabel1.setText("Escoge el dueño");

        jLabel3.setText("Nombre mascota");

        txt_nombre_mascota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_nombre_mascotaActionPerformed(evt);
            }
        });

        jLabel4.setText("Escoge la especie");

        jLabel5.setText("Raza");

        jLabel6.setText("Edad");

        jLabel7.setText("Peso");

        btn_agregar.setBackground(new java.awt.Color(1, 186, 59));
        btn_agregar.setForeground(new java.awt.Color(255, 255, 255));
        btn_agregar.setText("Agregar");
        btn_agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_agregarActionPerformed(evt);
            }
        });

        btn_editar.setBackground(new java.awt.Color(49, 66, 82));
        btn_editar.setForeground(new java.awt.Color(255, 255, 255));
        btn_editar.setText("Editar");
        btn_editar.setToolTipText("Guardar cambios");
        btn_editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editarActionPerformed(evt);
            }
        });

        btn_buscar.setBackground(new java.awt.Color(0, 204, 204));
        btn_buscar.setForeground(new java.awt.Color(255, 255, 255));
        btn_buscar.setText("Buscar");
        btn_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_buscarActionPerformed(evt);
            }
        });

        btn_eliminar.setBackground(new java.awt.Color(255, 0, 0));
        btn_eliminar.setForeground(new java.awt.Color(255, 255, 255));
        btn_eliminar.setText("Eliminar");
        btn_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_eliminarActionPerformed(evt);
            }
        });

        tabla_mascotas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabla_mascotas);

        combo_persona.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_persona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_personaActionPerformed(evt);
            }
        });

        combo_especie.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_especie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_especieActionPerformed(evt);
            }
        });

        txt_peso.setText("jTextField1");

        jLabel8.setText("Genero");

        combo_genero.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel9.setText("Esterilizada");

        combo_esterilizado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        menu_dueno.setText("Agregar");
        menu_dueno.add(jSeparator1);

        jMenuItem1.setText("Dueño");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        menu_dueno.add(jMenuItem1);
        menu_dueno.add(jSeparator2);

        menu_especie.setText("Especie");
        menu_especie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_especieActionPerformed(evt);
            }
        });
        menu_dueno.add(menu_especie);

        jMenuBar1.add(menu_dueno);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(btn_agregar)
                .addGap(84, 84, 84)
                .addComponent(btn_editar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_eliminar)
                .addGap(76, 76, 76))
            .addGroup(layout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txt_edad, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                    .addComponent(combo_persona, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(combo_especie, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(combo_genero, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel5)
                            .addComponent(jLabel9)
                            .addComponent(btn_buscar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_raza, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                            .addComponent(txt_peso)
                            .addComponent(combo_esterilizado, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txt_nombre_mascota, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(111, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(txt_nombre_mascota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo_persona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(txt_raza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo_especie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_edad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(txt_peso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(combo_genero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(combo_esterilizado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_agregar)
                    .addComponent(btn_editar)
                    .addComponent(btn_buscar)
                    .addComponent(btn_eliminar))
                .addGap(45, 45, 45)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        Frm_Persona vista_persona = new Frm_Persona();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void menu_especieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_especieActionPerformed
        // TODO add your handling code here:
        Frm_Especie vista_especie = new Frm_Especie();
    }//GEN-LAST:event_menu_especieActionPerformed

    private void combo_personaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_personaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_combo_personaActionPerformed

    private void combo_especieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_especieActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_combo_especieActionPerformed

    private void txt_nombre_mascotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_nombre_mascotaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_nombre_mascotaActionPerformed

    private void btn_agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_agregarActionPerformed
        // TODO add your handling code here:
        if (verificaDatos()) {
            try {
                mac.setDueño(getDueño());
                mac.setEspecie(getEspecie());
                mac.setEdad(txt_edad.getText());
                mac.setGenero(getGenero());
                mac.setNombre_mascota(txt_nombre_mascota.getText());
                mac.setRaza(txt_raza.getText());
                mac.setPeso(txt_peso.getText());
                mac.setEsterilizada(getEsterilizada());
                mensaje = macBo.agregarMascota(mac);
                JOptionPane.showMessageDialog(this, mensaje);
                limpiarCampos();
                mostrarDatosTabla();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, mensaje);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Tienes que llenar todos los campos");
        }
    }//GEN-LAST:event_btn_agregarActionPerformed

    private void btn_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_eliminarActionPerformed
        // TODO add your handling code here:
        try {
            mensaje = macBo.eliminarMascota(id_mascota);
            JOptionPane.showMessageDialog(this, mensaje);
            limpiarCampos();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, mensaje);
        }
        mostrarDatosTabla();
    }//GEN-LAST:event_btn_eliminarActionPerformed

    private void btn_editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editarActionPerformed
        // TODO add your handling code here:
        if (verificaDatos()) {
            try {
                mac.setId_mascota(id_mascota);
                mac.setDueño(getDueño());
                mac.setEspecie(getEspecie());
                mac.setEdad(txt_edad.getText());
                mac.setGenero(getGenero());
                mac.setNombre_mascota(txt_nombre_mascota.getText());
                mac.setRaza(txt_raza.getText());
                mac.setPeso(txt_peso.getText());
                mac.setEsterilizada(getEsterilizada());
                mensaje = macBo.agregarMascota(mac);
                tabla_mascotas.clearSelection();
                JOptionPane.showMessageDialog(this, mensaje);
                mostrarDatosTabla();
                limpiarCampos();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, mensaje);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Tienes que llenar todos los campos");
        }
    }//GEN-LAST:event_btn_editarActionPerformed

    private void btn_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_buscarActionPerformed
        // TODO add your handling code here:
        try {
            ArrayList<Mascota> mascota = macBo.buscarMascotaNombre(txt_nombre_mascota.getText());

            for (Mascota m : mascota) {
                id_mascota = m.getId_mascota();
                setIndexComboDueño(m.getDueño());
                setIndexComboEspecie(m.getEspecie());
                txt_edad.setText(m.getEdad());
                setIndexComboGenero(m.getGenero());
                txt_nombre_mascota.setText(m.getNombre_mascota());
                txt_raza.setText(m.getRaza());
                txt_peso.setText(m.getPeso());
                setIndexComboEsterilizada(m.getEsterilizada());
            }
        } catch (Exception sql) {
            JOptionPane.showMessageDialog(null, sql);
        }


    }//GEN-LAST:event_btn_buscarActionPerformed
    private void mostrarDatosTabla() {
        DefaultTableModel contenido = (DefaultTableModel) tabla_mascotas.getModel();

        contenido.setRowCount(0);

        try {
            Connection conn = Conexion.Conectar();

            //Vista
            String procedureCall = "Select * from datos_mascota";
            CallableStatement mstmt = conn.prepareCall(procedureCall);

            mstmt.execute();

            ResultSet resultSet = mstmt.getResultSet();
            if (resultSet != null) {
                while (resultSet.next()) {

                    Integer mascotaID = resultSet.getInt("ID");
                    String dueño = resultSet.getString("Dueño");
                    String especie = resultSet.getString("Especie");
                    Integer edad = resultSet.getInt("Edad");
                    String genero = resultSet.getString("Genero");
                    String nombre_mascota = resultSet.getString("Nombre Mascota");
                    String raza = resultSet.getString("Raza");
                    Integer peso = resultSet.getInt("Peso");
                    String esterilizada = resultSet.getString("Esterilizada");

                    // Agregar los datos a la tabla
                    ((DefaultTableModel) tabla_mascotas.getModel()).addRow(new Object[]{mascotaID, dueño, especie, edad, genero, nombre_mascota, raza, peso, esterilizada
                    });
                }
            }

            if (resultSet != null) {
                resultSet.close();
            }
            mstmt.close();
            conn.close();

        } catch (Exception e) {
            System.out.println("Error al conectar: " + e);
        }
    }

    private void mostrarDueños() {

        try {
            Connection conn = Conexion.Conectar();

            //Vista
            String procedureCall = "Select * from datos_dueño";
            CallableStatement mstmt = conn.prepareCall(procedureCall);

            mstmt.execute();

            ResultSet resultSet = mstmt.getResultSet();
            if (resultSet != null) {
                while (resultSet.next()) {

                    Integer dueñoID = resultSet.getInt("ID");
                    String dueño = resultSet.getString("Dueño");

                    // Agregar los datos al Combo Box
                    combo_persona.addItem(dueñoID + "- " + dueño);
                }
            }

            if (resultSet != null) {
                resultSet.close();
            }
            mstmt.close();
            conn.close();

        } catch (Exception e) {
            System.out.println("Error al conectar: " + e);
        }
    }

    private void mostrarEspecie() {

        try {
            Connection conn = Conexion.Conectar();

            //Vista
            String procedureCall = "Select * from datos_especie";
            CallableStatement mstmt = conn.prepareCall(procedureCall);

            mstmt.execute();

            ResultSet resultSet = mstmt.getResultSet();
            if (resultSet != null) {
                while (resultSet.next()) {

                    Integer especieID = resultSet.getInt("ID");
                    String especie = resultSet.getString("Especie");

                    // Agregar los datos al Combo Box
                    combo_persona.addItem(especieID + "- " + especie);
                }
            }

            if (resultSet != null) {
                resultSet.close();
            }
            mstmt.close();
            conn.close();

        } catch (Exception e) {
            System.out.println("Error al conectar: " + e);
        }
    }

    private void mostrarGenero() {

        try {
            Connection conn = Conexion.Conectar();

            //Vista
            String procedureCall = "Select * from datos_genero";
            CallableStatement mstmt = conn.prepareCall(procedureCall);

            mstmt.execute();

            ResultSet resultSet = mstmt.getResultSet();
            if (resultSet != null) {
                while (resultSet.next()) {

                    Integer generoID = resultSet.getInt("ID");
                    String genero = resultSet.getString("Genero");

                    // Agregar los datos al Combo Box
                    combo_persona.addItem(generoID + "- " + genero);
                }
            }

            if (resultSet != null) {
                resultSet.close();
            }
            mstmt.close();
            conn.close();

        } catch (Exception e) {
            System.out.println("Error al conectar: " + e);
        }
    }

    private void mostrarEsterilizada() {

        try {
            Connection conn = Conexion.Conectar();

            //Vista
            String procedureCall = "Select * from datos_esterilizada";
            CallableStatement mstmt = conn.prepareCall(procedureCall);

            mstmt.execute();

            ResultSet resultSet = mstmt.getResultSet();
            if (resultSet != null) {
                while (resultSet.next()) {

                    Integer esterilizadaID = resultSet.getInt("ID");
                    String esterilizada = resultSet.getString("Esterilizada");

                    // Agregar los datos al Combo Box
                    combo_persona.addItem(esterilizadaID + "- " + esterilizada);
                }
            }

            if (resultSet != null) {
                resultSet.close();
            }
            mstmt.close();
            conn.close();

        } catch (Exception e) {
            System.out.println("Error al conectar: " + e);
        }
    }

    private boolean verificaDatos() {
        boolean verificar = false, verificarD = true;
        String nombre_mascota = txt_nombre_mascota.getText();
        String raza = txt_raza.getText();
        String peso = txt_peso.getText();

        int edad = 0; // Valor por defecto, podrías asignar otro valor si es adecuado

        try {
            edad = Integer.parseInt(txt_edad.getText()); // Convertir el valor del campo de texto a entero
        } catch (NumberFormatException e) {
            // En caso de que la conversión falle (entrada no válida), la variable 'edad' quedará en su valor por defecto (0)
        }

        if (edad == 0 && nombre_mascota.isEmpty() && raza.isEmpty() && peso.isEmpty()) {
            verificarD = false;
        }

        boolean verificarR = combo_persona.getSelectedIndex() != 0;
        boolean verificarEspecie = combo_especie.getSelectedIndex() != 0;
        boolean verificarEsterilizado = combo_esterilizado.getSelectedIndex() != 0;
        boolean verificarGenero = combo_genero.getSelectedIndex() != 0;

        if (verificarD && verificarR && verificarEspecie && verificarEsterilizado && verificarGenero) {
            verificar = true;
        }

        return verificar;
    }

    private int getDueño() {
        String Ddueño = combo_persona.getSelectedItem().toString();
        int id;
        try {
            String dueño = Ddueño.substring(0, 2);
            id = Integer.parseInt(dueño + "");
        } catch (Exception e) {
            String dueño = Ddueño.substring(0, 1);
            id = Integer.parseInt(dueño + "");
        }
        return id;
    }

    private int getEspecie() {
        String Despecie = combo_especie.getSelectedItem().toString();
        int id;
        try {
            String especie = Despecie.substring(0, 2);
            id = Integer.parseInt(especie + "");
        } catch (Exception e) {
            String especie = Despecie.substring(0, 1);
            id = Integer.parseInt(especie + "");
        }
        return id;
    }

    private int getGenero() {
        String Dgenero = combo_genero.getSelectedItem().toString();
        int id;
        try {
            String genero = Dgenero.substring(0, 2);
            id = Integer.parseInt(genero + "");
        } catch (Exception e) {
            String genero = Dgenero.substring(0, 1);
            id = Integer.parseInt(genero + "");
        }
        return id;
    }

    private int getEsterilizada() {
        String Desterilizada = combo_esterilizado.getSelectedItem().toString();
        int id;
        try {
            String esterilizada = Desterilizada.substring(0, 2);
            id = Integer.parseInt(esterilizada + "");
        } catch (Exception e) {
            String esterilizada = Desterilizada.substring(0, 1);
            id = Integer.parseInt(esterilizada + "");
        }
        return id;
    }

    private void setIndexComboDueño(int id_dueño) {
        for (int i = 1; i < combo_persona.getItemCount(); i++) {

            String item = combo_persona.getItemAt(i);
            char dueñoc = item.charAt(0);
            int dueño = Integer.parseInt(dueñoc + "");
            if (dueño == id_dueño) {
                combo_persona.setSelectedIndex(i);
                break;
            }
        }
    }

    private void setIndexComboEspecie(int id_especie) {
        for (int i = 1; i < combo_especie.getItemCount(); i++) {

            String item = combo_especie.getItemAt(i);
            char especiec = item.charAt(0);
            int especie = Integer.parseInt(especiec + "");
            if (especie == id_especie) {
                combo_especie.setSelectedIndex(i);
                break;
            }
        }
    }

    private void setIndexComboGenero(int id_genero) {
        for (int i = 1; i < combo_genero.getItemCount(); i++) {

            String item = combo_genero.getItemAt(i);
            char generoc = item.charAt(0);
            int genero = Integer.parseInt(generoc + "");
            if (genero == id_genero) {
                combo_genero.setSelectedIndex(i);
                break;
            }
        }
    }

    private void setIndexComboEsterilizada(int id_esterilizada) {
        for (int i = 1; i < combo_esterilizado.getItemCount(); i++) {

            String item = combo_esterilizado.getItemAt(i);
            char esterilizadac = item.charAt(0);
            int esterilizada = Integer.parseInt(esterilizadac + "");
            if (esterilizada == id_esterilizada) {
                combo_esterilizado.setSelectedIndex(i);
                break;
            }
        }
    }

    private void limpiarCampos() {
        txt_edad.setText("");
        txt_nombre_mascota.setText("");
        txt_peso.setText("");
        txt_raza.setText("");
        try {
            combo_especie.setSelectedIndex(0);
            combo_esterilizado.setSelectedIndex(0);
            combo_genero.setSelectedIndex(0);
            combo_persona.setSelectedIndex(0);
        } catch (ArrayIndexOutOfBoundsException e) {
        }
    }

    private void obtenerSeleccion() {
        // Agregar un ListSelectionListener a la tabla
        tabla_mascotas.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    // Obtener el número de fila y columna seleccionada
                    int selectedRow = tabla_mascotas.getSelectedRow();

                    System.out.println(selectedRow);

                    // Obtener la primera celda seleccionada
                    Object selectedData = tabla_mascotas.getValueAt(selectedRow, 0);

                    String id = selectedData.toString();
                    int idConsulta = Integer.parseInt(id);

                    try {
                        ArrayList<Mascota> mascota = macBo.buscarMascotaId(idConsulta);

                        for (Mascota m : mascota) {
                            id_mascota = m.getId_mascota();
                            setIndexComboDueño(m.getDueño());
                            setIndexComboEspecie(m.getEspecie());
                            txt_edad.setText(m.getEdad());
                            setIndexComboGenero(m.getGenero());
                            txt_nombre_mascota.setText(m.getNombre_mascota());
                            txt_raza.setText(m.getRaza());
                            txt_peso.setText(m.getPeso());
                            setIndexComboEsterilizada(m.getEsterilizada());
                        }
                    } catch (Exception sql) {
                        JOptionPane.showMessageDialog(null, sql);
                    }
                    //tabla_personas.clearSelection();
                }
            }
        });

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frm_Mascota.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frm_Mascota.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frm_Mascota.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frm_Mascota.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frm_Mascota().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_agregar;
    private javax.swing.JButton btn_buscar;
    private javax.swing.JButton btn_editar;
    private javax.swing.JButton btn_eliminar;
    private javax.swing.JComboBox<String> combo_especie;
    private javax.swing.JComboBox<String> combo_esterilizado;
    private javax.swing.JComboBox<String> combo_genero;
    private javax.swing.JComboBox<String> combo_persona;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JMenu menu_dueno;
    private javax.swing.JMenuItem menu_especie;
    private javax.swing.JTable tabla_mascotas;
    private javax.swing.JTextField txt_edad;
    private javax.swing.JTextField txt_nombre_mascota;
    private javax.swing.JTextField txt_peso;
    private javax.swing.JTextField txt_raza;
    // End of variables declaration//GEN-END:variables
}
