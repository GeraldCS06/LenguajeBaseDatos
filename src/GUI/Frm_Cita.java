package GUI;

import Bo.CitaBo;
import Entidad.Cita;
import conexion.Conexion;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class Frm_Cita extends javax.swing.JFrame {

    private int id_cita;
    private DefaultTableModel tabla;
    private Cita cita = new Cita();
    private CitaBo citaBo = new CitaBo();
    private String mensaje = "";

    public Frm_Cita() {
        initComponents();
        this.setVisible(true);
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        //mostrarDatosTabla();
        //mostrarRoles();
        //obtenerSeleccion();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txt_fecha = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btn_agregar = new javax.swing.JButton();
        btn_editar = new javax.swing.JButton();
        btn_buscar = new javax.swing.JButton();
        btn_eliminar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla_citas = new javax.swing.JTable();
        combo_empleado = new javax.swing.JComboBox<>();
        combo_mascota = new javax.swing.JComboBox<>();
        txt_hora = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menu_persona = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menu_servicio = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(49, 66, 82));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Cita");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(322, 322, 322))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel2)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        jLabel1.setText("Fecha:");

        txt_fecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_fechaActionPerformed(evt);
            }
        });

        jLabel3.setText("Hora:");

        jLabel4.setText("Persona:");

        jLabel5.setText("Mascota:");

        btn_agregar.setBackground(new java.awt.Color(1, 186, 59));
        btn_agregar.setForeground(new java.awt.Color(255, 255, 255));
        btn_agregar.setText("Agregar");
        btn_agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_agregarActionPerformed(evt);
            }
        });

        btn_editar.setBackground(new java.awt.Color(49, 66, 82));
        btn_editar.setForeground(new java.awt.Color(255, 255, 255));
        btn_editar.setText("Editar");
        btn_editar.setToolTipText("Guardar cambios");
        btn_editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editarActionPerformed(evt);
            }
        });

        btn_buscar.setBackground(new java.awt.Color(0, 204, 204));
        btn_buscar.setForeground(new java.awt.Color(255, 255, 255));
        btn_buscar.setText("Buscar");
        btn_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_buscarActionPerformed(evt);
            }
        });

        btn_eliminar.setBackground(new java.awt.Color(255, 0, 0));
        btn_eliminar.setForeground(new java.awt.Color(255, 255, 255));
        btn_eliminar.setText("Eliminar");
        btn_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_eliminarActionPerformed(evt);
            }
        });

        tabla_citas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Fecha", "Hora", "Persona", "Mascota"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla_citas);

        combo_empleado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_empleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_empleadoActionPerformed(evt);
            }
        });

        combo_mascota.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jMenu1.setText("Agregar");

        menu_persona.setText("Empleado");
        menu_persona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_personaActionPerformed(evt);
            }
        });
        jMenu1.add(menu_persona);
        jMenu1.add(jSeparator1);

        menu_servicio.setText("Mascota");
        menu_servicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_servicioActionPerformed(evt);
            }
        });
        jMenu1.add(menu_servicio);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_agregar)
                        .addGap(84, 84, 84)
                        .addComponent(btn_editar)
                        .addGap(100, 100, 100)
                        .addComponent(btn_buscar)
                        .addGap(72, 72, 72)
                        .addComponent(btn_eliminar))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_fecha, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                            .addComponent(combo_empleado, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(62, 62, 62)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(combo_mascota, 0, 115, Short.MAX_VALUE)
                            .addComponent(txt_hora))))
                .addContainerGap(81, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txt_fecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txt_hora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(combo_empleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo_mascota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_agregar)
                    .addComponent(btn_editar)
                    .addComponent(btn_buscar)
                    .addComponent(btn_eliminar))
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menu_personaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_personaActionPerformed
        // TODO add your handling code here:
        Frm_Empleado vista_empleado = new Frm_Empleado();
    }//GEN-LAST:event_menu_personaActionPerformed

    private void menu_servicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_servicioActionPerformed
        // TODO add your handling code here:
        Frm_Mascota vista_mascota = new Frm_Mascota();
    }//GEN-LAST:event_menu_servicioActionPerformed

    private void txt_fechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_fechaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_fechaActionPerformed

    private void btn_agregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_agregarActionPerformed
        // TODO add your handling code here:
        if (verificaDatos()) {
            try {
                cita.setFecha(HEIGHT);
                cita.setHora(ABORT);
                cita.setPersona(ERROR);
                cita.setMascota(id_cita);

                mensaje = citaBo.agregarCita(cita);
                JOptionPane.showMessageDialog(this, mensaje);
                limpiarCampos();
                mostrarDatosTabla();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, mensaje);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Tienes que llenar todos los campos");
        }
    }//GEN-LAST:event_btn_agregarActionPerformed

    private void combo_empleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_empleadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_combo_empleadoActionPerformed

    private void btn_editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editarActionPerformed
        // TODO add your handling code here:
        if (verificaDatos()) {
            try {
                cita.setId_cita(id_cita);
                cita.setFecha(HEIGHT);
                cita.setHora(ABORT);
                cita.setPersona(ERROR);
                cita.setMascota(id_cita);
                mensaje = citaBo.actualizarCita(cita);
                tabla_citas.clearSelection();
                JOptionPane.showMessageDialog(this, mensaje);
                mostrarDatosTabla();
                limpiarCampos();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, mensaje);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Tienes que llenar todos los campos");
        }
    }//GEN-LAST:event_btn_editarActionPerformed

    private void btn_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_buscarActionPerformed
        if (verificaDatos()) {
            try {
                cita.setId_cita(id_cita);
                cita.setFecha(HEIGHT);
                cita.setHora(ABORT);
                cita.setPersona(ERROR);
                cita.setMascota(id_cita);
                mensaje = citaBo.actualizarCita(cita);
                tabla_citas.clearSelection();
                JOptionPane.showMessageDialog(this, mensaje);
                mostrarDatosTabla();
                limpiarCampos();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, mensaje);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Tienes que llenar todos los campos");
        }
    }//GEN-LAST:event_btn_buscarActionPerformed

    private void btn_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_eliminarActionPerformed
        try {
            mensaje = citaBo.eliminarCita(id_cita);
            JOptionPane.showMessageDialog(this, mensaje);
            limpiarCampos();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, mensaje);
        }
        mostrarDatosTabla();
    }//GEN-LAST:event_btn_eliminarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frm_Cita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frm_Cita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frm_Cita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frm_Cita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frm_Cita().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_agregar;
    private javax.swing.JButton btn_buscar;
    private javax.swing.JButton btn_editar;
    private javax.swing.JButton btn_eliminar;
    private javax.swing.JComboBox<String> combo_empleado;
    private javax.swing.JComboBox<String> combo_mascota;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuItem menu_persona;
    private javax.swing.JMenuItem menu_servicio;
    private javax.swing.JTable tabla_citas;
    private javax.swing.JTextField txt_fecha;
    private javax.swing.JTextField txt_hora;
    // End of variables declaration//GEN-END:variables

    private boolean verificaDatos() {
        boolean verificar = false, verificarD = true;
        String fecha = txt_fecha.getText();
        String hora = txt_hora.getText();

        if (fecha == "" && hora == "") {
            verificarD = false;
        }

        boolean verificarR = false;
        if (combo_empleado.getSelectedIndex() != 0) {
            if (combo_mascota.getSelectedIndex() != 0) {
                verificarR = true;
            }
        }

        if (verificarD && verificarR) {
            verificar = true;
        }
        return verificar;
    }

    private void limpiarCampos() {
        txt_fecha.setText("");
        txt_hora.setText("");
        try {
            combo_empleado.setSelectedIndex(0);
            combo_mascota.setSelectedIndex(0);
        } catch (ArrayIndexOutOfBoundsException e) {
        }
    }

    private void mostrarDatosTabla() {
        DefaultTableModel contenido = (DefaultTableModel) tabla_citas.getModel();

        contenido.setRowCount(0);

        try {
            Connection conn = Conexion.Conectar();

            //Vista
            String procedureCall = "Select * from datos_cita";
            CallableStatement stmt = conn.prepareCall(procedureCall);

            stmt.execute();

            ResultSet resultSet = stmt.getResultSet();
            if (resultSet != null) {
                while (resultSet.next()) {

                    Integer citaID = resultSet.getInt("ID");
                    Integer fecha = resultSet.getInt("Fecha");
                    Integer hora = resultSet.getInt("Hora");
                    Integer persona = resultSet.getInt("Persona");
                    Integer mascota = resultSet.getInt("Mascota");

                    // Agregar los datos a la tabla
                    ((DefaultTableModel) tabla_citas.getModel()).addRow(new Object[]{citaID, fecha, hora,
                        persona, mascota});
                }
            }

            if (resultSet != null) {
                resultSet.close();
            }
            stmt.close();
            conn.close();

        } catch (Exception e) {
            System.out.println("Error al conectar: " + e);
        }
    }

    private void mostrarPersona() {

        try {
            Connection conn = Conexion.Conectar();

            //Vista
            String procedureCall = "Select * from datos_nombre";
            CallableStatement stmt = conn.prepareCall(procedureCall);

            stmt.execute();

            ResultSet resultSet = stmt.getResultSet();
            if (resultSet != null) {
                while (resultSet.next()) {

                    String persona = resultSet.getString("Nombre");

                    // Agregar los datos al Combo Box
                    combo_empleado.addItem(persona);
                }
            }

            if (resultSet != null) {
                resultSet.close();
            }
            stmt.close();
            conn.close();

        } catch (Exception e) {
            System.out.println("Error al conectar: " + e);
        }
    }

    private void mostrarMascota() {

        try {
            Connection conn = Conexion.Conectar();

            //Vista
            String procedureCall = "Select * from datos_nombre_mascota";
            CallableStatement stmt = conn.prepareCall(procedureCall);

            stmt.execute();

            ResultSet resultSet = stmt.getResultSet();
            if (resultSet != null) {
                while (resultSet.next()) {

                    String mascota = resultSet.getString("Mascota");

                    // Agregar los datos al Combo Box
                    combo_mascota.addItem(mascota);
                }
            }

            if (resultSet != null) {
                resultSet.close();
            }
            stmt.close();
            conn.close();

        } catch (Exception e) {
            System.out.println("Error al conectar: " + e);
        }
    }

    private int getId_persona() {
        String Dpersona = combo_empleado.getSelectedItem().toString();
        int id;
        try {
            String persona = Dpersona.substring(0, 2);
            id = Integer.parseInt(persona + "");
        } catch (Exception e) {
            String persona = Dpersona.substring(0, 1);
            id = Integer.parseInt(persona + "");
        }
        return id;
    }

    private int getInt_Mascota() {
        String Dcliente = combo_mascota.getSelectedItem().toString();
        int Mascota;
        try {
            String masc = Dcliente.substring(0, 2);
            Mascota = Integer.parseInt(masc + "");
        } catch (Exception e) {
            String masc = Dcliente.substring(0, 1);
            Mascota = Integer.parseInt(masc + "");
        }
        return Mascota;
    }

    private void setIndexComboCliente(int cliente) {
        for (int i = 1; i < combo_empleado.getItemCount(); i++) {

            String item = combo_empleado.getItemAt(i);
            char clien = item.charAt(0);
            int persona = Integer.parseInt(clien + "");
            if (persona == cliente) {
                combo_empleado.setSelectedIndex(i);
                break;
            }
        }
    }

    private void setIndexComboProducto(int producto) {
        for (int i = 1; i < combo_mascota.getItemCount(); i++) {

            String item = combo_mascota.getItemAt(i);
            char masco = item.charAt(0);
            int masc = Integer.parseInt(masco + "");
            if (masc == producto) {
                combo_mascota.setSelectedIndex(i);
                break;
            }
        }
    }
}
